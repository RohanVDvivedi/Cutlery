1. Tasks picked

 * Pheap
  * implement with policies SKEW_HEAP and LEFTIST_HEAP
  * api
    * initialize_pheap
    * initialize_phpnode
    * is_free_floating_phpnode
    * push_to_pheap
    * pop_from_pheap
    * get_top_of_pheap
    * heapify_for_in_pheap
    * remove_from_pheap
    * remove_all_from_pheap
  * internal static function only for
    * meld_skew_heap
    * meld_leftist_heap
    * get_meld_function_for_pheap -> returns any of the above 2 functions
    * disconnect_phpnode_from_parent_phpnode
    * swap_chidren_for_phpnode
  * enum pheaptype {
  	SKEW_HEAP,
  	LEFTIST_HEAP,
  }
  * struct phpnode {
  	phpnode* parent;
  	phpnode* left;
  	phpnode* right;
  	cy_uint node_property;
  }
  * struct pheap {
  	pheaptype type;
  	heap_info info;
  	cy_uint node_offset;
  	phpnode* root;
  	comparator_interface comparator;
  };


3. Competely new datastructure tasks (*future)

RANGE QUERY ON INT/UINT ARRAY DATASTRUCTURE tasks
 * use value_arraylist for below functionality and implement their iterative approaches only
 * access methods must be insert, update, find_range
 * implement segment tree => for min, max, sum, product(multiplication), bitwise-and, bitwise-or, bitwise-xor, lcm and hcf
 * implement fenwick tree => for addition, product(multiplication), bitwise-xor => the functions for which their inverse exists
 * implement sparse table => max, min, lcm, hcf => the functions for which f(a,b,c,d,e) = f(f(a,b,c), f(b,c,d,e))
