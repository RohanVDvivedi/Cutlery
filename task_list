1. Tasks picked

ALLOCATOR
 * refactor stream_to_read_until_dstring to use cutlery allocators

2. Add new datastructure types tasks (*future)

deferred_callback_stack
 * implemented as a singly list, called as deferred_callback_stack
 * deferred_callback is pushed to its head by a defer_callback(deferred_callback* )
 * call_all_from_deferred_callback_stack() calls all from the stack head first
 * struct deferred_callback
 {
 		void* resource_p;
 		void (*callback)(void* resource_p);
 		slnode n;
 };
 #define NEW_DEFERRED_CALLBACK(recource_p_v, callback_v) (&((deferred_callback){resource_p_v, callback_v, {NULL}}))
 * to be used when you need to pile up calls and call then in reverse order like the defer functionality of the golang
 * file close, stream close, deinitialize calls, tcp connection close, free calls to large data structures, mutex unlocks, etc, can leverage this functionality, the resources what live and die within a function call

HEAP tasks (NEW DATASTRUCTURE inclusion)
 * implement a node based intrusive fibonacci heap. (binomial heap will not be supported, strict constraints of binomial heap will give us no benefit)
struct fibheapnode
{
	// must be the first element of this node, so that children and root_list can use the same node_offset as the fibheap.node_offset
	llnode sibling_links;

	// parent of this node, NULL if it exists in the rootlist
	void* parent;

	// number of children
	cy_uint degree;

	// the below bit will be set if the node lost a child since it was merged with its parent, this bit will be cleared as soon as it gets added to rootlist
	int lost_child_marker;

	// linkedlist of its children
	linkedlist children;
};
struct fibheap
{
	heap_info info;

	cy_uint node_offset;

	// pointer to the top of the priority_queue, this node must be present in the root_list
	void* top_node;

	// linkedlist of its roots
	linkedlist root_list;
};
 * initialize_fibheap -> makes a new empty fibheap
 * merge_fibheap -> merge root lists of the other fibheap, update the top_node
 * get_top_of_fibheap -> returns the top element
 * pop_from_fibheap -> removes top element, and adds all its children to the root_list, update the top_node
 * push_to_fibheap -> inserts the element to the rootlist and updates the top_node
 * remove_from_fibheap -> removes node from fibheap and pushes all its children to the root_list, update the top_node
 * heapify_at -> removes node or any of its children from the tree and puts them back into the root_list, if they pass is_reordering_required test, updates top_node
 * internal functions
   * move_node_to_root_list -> does as suggested, and updates top_node, it will also increments the lost_child_marker of its parent, NOP if its parent is NULL
   * find_new_top_node given the linkedlist -> iterates over root_list and finds the new top_node
   * restore_structure -> creates a hashmap <ELEMENTS_AS_LINKED_LIST with same node_offset> degree -> root node, of fixed size = 32, and then keep on merging nodes with same degree and promoting the parent, then remove all of them into the root_list of fibheap, while keeping track of the top_node

BST order statistics
 * add another node_offset_to_order_statistics (to be set to NO_ORDER_STATISTICS_BST_NODE_OFFSET = INVALID_INDEX if not in use)
   * to point to a orderstat_bstnode{cy_uint subtree_size;} -> storing the number of nodes rooted at the given node
 * to provide functionality to get_index_of_element_in_bst, get_element_at_index_in_bst OR get_element_count in bst and get_subtree_element_count (internal function).
 * changes only required to subtree_size in bst_rotations.* and bst_core.* source files, whre if a node_offset_to_order_statistics is provided then invalidating the subtree_size by writing 0 to it and iteratively recomputing the subtree_size until you reach the root of the bst
 * add a note that order statistics bst increases complexity of the bst, making it (log(n))^2 for inserts and deletes, and that the orderstat_bstnode gives away no information about the inclusion of the node in the bst

3. Competely new datastructure tasks (*future)

RANGE QUERY ON INT/UINT ARRAY DATASTRUCTURE tasks
 * use value_arraylist for below functionality and implement their iterative approaches only
 * access methods must be insert, update, find_range
 * implement segment tree => for min, max, sum, product(multiplication), bitwise-and, bitwise-or, bitwise-xor, lcm and hcf
 * implement fenwick tree => for addition, product(multiplication), bitwise-xor => the functions for which their inverse exists
 * implement sparse table => max, min, lcm, hcf => the functions for which f(a,b,c,d,e) = f(f(a,b,c), f(b,c,d,e))
