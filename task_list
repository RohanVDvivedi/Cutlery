 STAGE - 3
 * use graph descriptor interface to build graph algorithms like :
       * dfs (iterative only (not recursive) with Cutlery stack)
       * bfs (iterative only with Cutlery queue)
       * bellmanford
       * dijkstra
       * floydwarshall
       * A*-star
       * minimum spanning tree
        etc (more will be added)

 STAGE - 4
 * provide expand_array_addional_size functions to expand array and other dependent datastructures in a more controller and flexible way
 * implement expand_and_reash_hashmap inside cutlery for expanding hashmap and remove rehashing functions from testcases of cutlery, BufferPool, Cashed, JSONParser, Serc
 * implement find all functions for all cutlery datastructures

 STAGE - 5
 * provide an interface/function to change the memory_allocator for Cutlery datastructures, also update cutlery api and other projects that use it
 * and enable usage of static or pre allocated memory for use with cutlery data structures

 STAGE - 6
 * provide a very simple trie data structure, to insert/search dstring* vs void*

 STAGE - 7
 * start using char[] instead of uint8_t[] for bitmaps -> get rid of <stdint.h>
 * convert all print functions to dstring based serializers using snprintf_dstring(), also with debug_print and tab_count as input parameters -> get rid of <stdio.h>

 STAGE - 8
 * provide a bloom_filter, based on the implementation of cutlery's bitmap datastructure
