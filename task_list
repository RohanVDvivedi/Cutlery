1. Tasks picked

2. Add new datastructure types tasks (*future)

STREAM
 * copy stream from ConnMan and move it to Cutlery, make the code safe to use and take in allocators
 * make it work with custom allocators, and pre-allocated memory for internal dpipes -> ensure that failures to resize are handled properly and do as desired by the most generic system, i.e. fail or silently suffer with low performance if possible
 * refactor stream api, to use cy_uint instead of size_t, and refactor ConnMan, HTTPparser, JSONparser, Serc and serc-template-application
 * build a writable stream, that inserts data concatenating into a dstring -> copy this from ConnMan
 * all sprint_* functions to be updated to serialize_* functions for all Cutlery data-structures

ALLOCATOR
 * implement a arena/stack allocaor
   * allocating with a fixed alignment (size will always be multiple of alignment) from the end
   * deallocating elements only at the end
   * and destroying the arena when it is no longer in use
   * need to stor only the block pointer, and allocated size for this allocator
 * implement a generic memory allocator
 * Make compute libraries like HTTPparser, JSONparser, Cutlery (itself), TupleStore and TupleIndexer use cutlery allocator interface

HEAP tasks (NEW DATASTRUCTURE inclusion)
 * implement a node based binomial heap and fibonacci heap.
 * it will use binomialheap node as a struct
struct binomialheapnode
{
	// parent of this node
	binomialheapnode* parent;

	// number of children
	cy_uint degree;

	// linkedlist of its children
	linkedlist children;
};
 * binomialheapnode will have utility functions to detach-from-parent, swap position-with-parent, link-parent-and-child etc since these fucntions can be used both with fibonacci heap and binomial heap
 * we will also have the main data structure struct as
struct binomialheap
{
	// implementation_type can be FIBONACCI_FAST_HEAP or BINOMIAL_FAST_HEAP
	binomialheap_implementation_type implementation_type;

	heap_info info;

	// pointer to the least or greatest node, based on type
	binomialheapnode* top_node;

	linkedlist root_list;
};

 * implement leftist heap as leftistheap (* future)

BST tasks (NEW DATASTRUCTURE inclusion * future)
 * provide implementation for TREAP, AA_TREE etc in bst
 * add cy_uint subtree_size (==0 if node is not in any bst) giving the number of nodes in sub tree rooted at the given node 
   * to provide functionality to get_index_of_element_in_bst, get_element_at_index_in_bst OR get_element_count in bst and get_subtree_element_count (internal function).
   * changes only required to subtree_size in bst_rotations.* and bst_core.* source files.

3. Competely new datastructure tasks (*future)

RADIX_TREE tasks (NEW DATASTRUCTURE)
 * implement a radix tree data structure i.e. a trie data structure that is defined as
struct trie_node
{
    dstring partial_string;
    cy_uint prefix_count; // total number of strings in the complete trie data structure that have the prefix until partial_string
    void* value;
    hashmap children; <K,V> => <trie_node.partial_string[0],trie_node>;

    // node for children hashmap, used by the parent, this will only be ununsed in root trie_node
    rbhnode/bstnode/llnode children_embed_node;
};
 * implement insert, search and remove operation to be noted a trie_node can not be deleted as long as it has either of value or any of the children

RANGE QUERY ON INT/UINT ARRAY DATASTRUCTURE tasks
 * use value_arraylist for below functionality and implement their iterative approaches only
 * access methods must be insert, update, find_range
 * implement segment tree => for min, max, sum, product(multiplication), bitwise-and, bitwise-or, bitwise-xor, lcm and hcf
 * implement fenwick tree => for addition, product(multiplication), bitwise-xor => the functions for which their inverse exists
 * implement sparse table => max, min, lcm, hcf => the functions for which f(a,b,c,d,e) = f(f(a,b,c), f(b,c,d,e))
