1. Tasks picked

2. Add new datastructure types tasks (*future)

ARRAY
 * capacity -> capacity stores capacity at data_p_p in bytes, replace all array_p->capacity calls to get_capacity_array() {return array_p->capacity / sizeof(void*);}, this will allow us to easily pass array's capacity arround to allocators

DSTRING
 * in expand_dstring calls in concatenate_dstring handle case when additional space calcuation may over flow, sum of theie sizes must not overflow

LINKEDLIST & SINGLYLIST tasks
 * implement swap element positions
 * implement radix_sort and bubble_sort function (using swap elements position)
 * sorting will help implement mergeable heap data structures

RADIX_TREE tasks (NEW DATASTRUCTURE)
 * implement a radix tree data structure i.e. a trie data structure that is defined as
struct trie_node
{
    dstring partial_string;
    cy_uint prefix_count; // total number of strings in the complete trie data structure that have the prefix of partial_string
    void* value;
    hashmap children; <K,V> => <trie_node.partial_string[0],trie_node>;

    // node for children hashmap, used by the parent, this will only be ununsed in root trie_node
    rbhnode/bstnode/llnode children_embed_node;
};
 * implement insert, search and remove operation to be noted a trie_node can not be deleted as long as it has either of value or any of the children

HEAP tasks (NEW DATASTRUCTURE inclusion)
 * move heap_type MIN_HEAP and MAX_HEAP to a separate header file, make MIN_HEAP = 1, and MAX_HEAP = -1, multiply heap type with the comparison result and implement the heap
 * make the current heap implementation into a N-ary heap, with N being cy_uint variable, to be provided at run time
 * (--optimization) start heapify_all from the last parent element that has a child, no need to bubble_down the leaf elements of the N-ary heap

 * implement a node based binomial heap and fibonacci heap.
 * it will use binomialheap node as a struct
struct binomialheapnode
{
	// parent of this node
	binomialheapnode* parent;

	// number of children
	cy_uint degree;

	// linkedlist of its children
	linkedlist children;
};
 * binomialheapnode will have utility functions to detach-from-parent, swap position-with-parent, link-parent-and-child etc since these fucntions can be used both with fibonacci heap and binomial heap
 * we will also have the main data structure struct as
struct binomialheap
{
	// implementation_type can be FIBONACCI_FAST_HEAP or BINOMIAL_FAST_HEAP
	binomialheap_implementation_type implementation_type;

	// type stores MIN_HEAP or MAX_HEAP
	heap_type type;

	// pointer to the least or greatest node, based on type
	binomialheapnode* top_node;

	linkedlist root_list;

	// comparator
	int (*compare)(const void* data1, const void* data2);
};

 * implement leftist heap as leftistheap (* future)

DSTRING tasks
 * implement boyer moore substring finding algorithm (and Aho corasick algorithm)

BST tasks (NEW DATASTRUCTURE inclusion * future)
 * provide implementation for TREAP, AA_TREE etc in bst
 * add cy_uint subtree_size (==0 if node is not in any bst) giving the number of nodes in sub tree rooted at the given node 
   * to provide functionality to get_index_of_element_in_bst, get_element_at_index_in_bst OR get_element_count in bst and get_subtree_element_count (internal function).
   * changes only required to subtree_size in bst_rotations.* and bst_core.* source files.

3. Competely new datastructure tasks (*future)

RANGE QUERY ON INT/UINT ARRAY DATASTRUCTURE tasks
 * use int or unsigned int for below functionality and implement their itrative approaches only
 * access methods must be insert, update, find_range
 * implement segment tree => for min, max, sum, product(multiplication), bitwise-and, bitwise-or, bitwise-xor, lcm and hcf
 * implement fenwick tree => for addition, product(multiplication), bitwise-xor => the functions for which their inverse exists
 * implement sparse table => max, min, lcm, hcf => the functions for which f(a,b,c,d,e) = f(f(a,b,c), f(b,c,d,e))
