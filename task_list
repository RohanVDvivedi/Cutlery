LATER

[dev branch : mem_alloc_move_integ]
 * integrate memory allocator interface with Cutlery datastructures that need memory management like the array and (hashmap, stack, queue and heap)
 * for fixed size array, (and other cutlery datastructures) memory_allocator
 * check correctness and integrate memory_move function with the memory allocator usage in the array and dstring

 [dev branch : graph_implementation]
 * use graph descriptor interface to build graph algorithms like :
    each of these graph functions take a memory_allocator to allocate memory for its own internal structures
    each of these functions must also take an array/queue/stack that will contain the result
    they also take a, node that we need to find and a compare function that returns zero when the match succeeds
       * dfs (iterative only with Cutlery stack)
       * bfs (iterative only with Cutlery queue)
       * bellmanford
       * dijkstra
       * floydwarshall
       * A*-star
       * minimum spanning tree
        etc (more will be added)

 [dev branch : trie_implementation]
 * provide a very simple trie data structure, to store groups of dstring. (* very far in the future)

 [dev branch : print_implementation]
  * convert all print functions to dstring based serializers using append_to_dstring_formatted() function
  * trim function to trim n characters from front or back in dstring
  * allow all print functions to serialize in debug and non debug modes
  * segregate display_dstring function and since it required stdio, implement it as a macro and allow it to be written to any file descriptor


(Far far future)
 * integrate queue and stack implementataions, so that we can handle a single header and source for both of them, and call is arraylist
  * add macros so that initialize_queue and initialize_stack (and the corresponding deinitialize functions) point to same functions underneath
  * it must have push_back_arraylist, push_front_arraylist, pop_back_arraylist and pop_front_arraylist functions which are also #defined to their counterpart implementation for push_stack, push_queue, pop_stack and pop_queue
  * add a way to inherently define and use a fixed size stack, heap, hashmap and queue, that wont make calls to expand and contract an array
