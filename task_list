LATER

 * integrate memory allocator interface with Cutlery datastructures that need memory management like the array and (hashmap, stack, queue and heap) [dev branch : memory_allocator_interface]
 * use graph descriptor interface to build graph algorithms [dev branch : graph_interface]
   like :
       * dfs (iterative only with Cutlery stack)
       * bfs (iterative only with Cutlery queue)
       * bellmanford
       * dijkstra
       * floydwarshall
       * Astar
       * minimum spanning tree
        etc (more will be added)
 * provide a very simple trie data structure, to store groups of dstring. (* very far in the future)

FUTURE

 [dev branch : print_implementations]
  * convert all print functions to dstring based serializers using append_to_dstring_formatted() function
  * trim function to trim n characters from front or back in dstring
  * allow all print functions to serialize in debug and non debug modes

 * imlement custom memory_move function, which must be memory overlap/overwrite safe (using reverse iteration) and should perform a processor word transfer as alignment matches with the processor word size (instead of byte transfer to increase efficiency) [dev branch : memory_move_implementation]
