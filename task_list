1. Tasks picked

 * add a typedef mem_size (to unsigned integer type), which can be used to store number of bytes, and is suppossed to be as wide as void* and atlest as wide as unsigned int.
 * also define MAX_MEM_SIZE
 * use mem_size in memory allocator interface, dstring, dpipe and cutlery stds functions like memory_copy, memory_move, memory_compare and memory_set.
 * we will use MAX_ARRAY_CAPACITY = min(MAX_MEM_SIZE / sizeof(void*), MAX_UNSIGNED_INT)
 * implement radix sort in cutlery to work with sizeof(unsigned int) * 8

2. Add new datastructure types tasks (*future)

RADIX_TREE tasks (NEW DATASTRUCTURE)
 * implement a radix tree data structure i.e. a trie data structure that is defined as
struct trie_node
{
    dstring partial_string;
    int prefix_count; // total number of strings in the complete trie structure that have the prefix (or are equal-to) of partial_string
    void* value;
    hashmap children; <K,V> => <trie_node.partial_string[0],trie_node>;
};
 * implement insert, search and remove operation to be noted a trie_node can not be deleted as long as it has either of value or any of the children

HEAP tasks (NEW DATASTRUCTURE inclusion)
 * implement a node based binomial heap and fibonacci heap and abstract them over the fastheap datastructure in cutlery, implemented as enums like FIBONACCI_HEAP and BINOMIAL_HEAP

DSTRING tasks
 * implement boyer moore substring finding algorithm (and Aho corasick algorithm)

BST tasks (NEW DATASTRUCTURE inclusion * future)
 * provide implementation for splay trees, Treap, AA etc in bst
 * add unsigned int subtree_size (==0 if node is not in any bst) giving the number of nodes in sub tree rooted at the given node 
   * to provide functionality to get nth smallest or largest in the bst OR to get number of elements greater/lesser/equals than x, OR get_element_count in bst and get_subtree_element_count (internal function).
   * changes only required to subtree_size in bst_rotations.* and bst_core.* source files.

3. Competely new datastructure tasks (*future)

RANGE QUERY ON INT/UINT ARRAY DATASTRUCTURE tasks
 * use int or unsigned int for below functionality and implement their itrative approaches only
 * access methods must be insert, update, find_range
 * implement segment tree => for min, max, sum, product(multiplication), bitwise-and, bitwise-or, bitwise-xor, lcm and hcf
 * implement fenwick tree => for addition, product(multiplication), bitwise-xor => the functions for which their inverse exists
 * implement sparse table => max, min, lcm, hcf => the functions for which f(a,b,c,d,e) = f(f(a,b,c), f(b,c,d,e))
