1. Tasks picked

 * Pheap
  * implement with policies SKEW_HEAP and LEFTIST_HEAP
  * api
    * push_to_pheap
    * heapify_for_in_pheap
    * remove_from_pheap
  * internal static function only for
    * meld_skew_pheap
    * meld_leftist_pheap
    * disconnect_phpnode_from_parent_phpnode
  * write tests, and compare ouputs for all 3 heaps for all operations after a get

 * build a cache data structure that has the following attributes
 struct cache {
  cy_uint max_capacity;
  cy_uint cur_capacity;
  cy_uint get_caoacity(const void* data); // this could be returning 1 OR the size of the element being inserted, cache only ensures that curr_capacity < max_capacity, else you need to evict soemthing first
  void* map; // can be hashmap or bst
  {
    insert_in_map()
    get_from_map()
    remove_from_map()
  }
  void* evictor; // can be heap, pheap, linkedlist or any kind of data structure
  {
    bump_usage()
    insert_in_evictor()
    remove_from_evictor()
  }
 }
 insert_in_cache()
 evict_from_cache()
 remove_from_cache()
 get_from_cache()

3. Competely new datastructure tasks (*future)

RANGE QUERY ON INT/UINT ARRAY DATASTRUCTURE tasks
 * use value_arraylist for below functionality and implement their iterative approaches only
 * access methods must be insert, update, find_range
 * implement segment tree => for min, max, sum, product(multiplication), bitwise-and, bitwise-or, bitwise-xor, lcm and hcf
 * implement fenwick tree => for addition, product(multiplication), bitwise-xor => the functions for which their inverse exists
 * implement sparse table => max, min, lcm, hcf => the functions for which f(a,b,c,d,e) = f(f(a,b,c), f(b,c,d,e))
