1. Tasks picked

2. Add new datastructure types tasks (*future)

RADIX_TREE tasks (NEW DATASTRUCTURE)
 * implement a radix tree data structure i.e. a trie data structure that is defined as
struct trie_node
{
    dstring partial_string;
    int prefix_count; // total number of strings in the complete trie structure that have the prefix (or are equal-to) of partial_string
    void* value;
    hashmap children; <K,V> => <trie_node.partial_string[0],trie_node>;
};
 * implement insert, search and remove operation to be noted a trie_node can not be deleted as long as it has either of value or any of the children

HEAP tasks (NEW DATASTRUCTURE inclusion)
 * implement a node based binomial heap and fibonacci heap and abstract them over the fastheap datastructure in cutlery, implemented as enums like FIBONACCI_HEAP and BINOMIAL_HEAP

DSTRING tasks
 * implement boyer moore substring finding algorithm (and Aho corasick algorithm)

Union find
 * while perfroming find, make all the nodes from the parameter to the parent to point to parent.
 * root of the tree points to itself instead of NULL, initialization of the node may be NULL.

array_tree
 * provide a simple implementation for an n way tree, parent and first child access (n * i + 1), check whether a node has a parent and whether it has child or not
 * the parent of i-th node in n way tree is always at floor((i-1)/n)

BST tasks (NEW DATASTRUCTURE inclusion)
 * implement modification such that root points to itself instead of NULL, this also solves the is_new_node issues (issue of single node tree's root node being a new node, though it is already in use).
 * implement get_inorder_next_of_in_bst and get_inorder_prev_of_in_bst
 * find_equals function to take in parameter to find the first or last that matches
 * similarly find_greater_equals must find greater element or the first occurence that equals the given value, and viceversa for find_lesser_equals, instead of any element that equals, it must be first or last occurence respectively
 * provide implementation for splay trees, Treap, AA etc in bst
 * add unsigned int subtree_size (==0 if node is not in any bst) giving the number of nodes in sub tree rooted at the given node 
   * to provide functionality to get nth smallest or largest in the bst OR to get number of elements greater/lesser/equals than x, OR get_element_count in bst and get_subtree_element_count (internal function).
   * changes only required to subtree_size in bst_rotations.* and bst_core.* source files.

HASHMAP tasks
 * implement get_next_in_same bucket.

ITERATOR api for linkedlist, singlylist, hashmap(as shown above) and bst
 * api for get_next and get_prev on every element for the above data structures if possible

3. Competely new datastructure tasks (*future)

RANGE QUERY ON INT/UINT ARRAY DATASTRUCTURE tasks
 * use int or unsigned int for below functionality and implement their itrative approaches only
 * access methods must be insert, update, find_range
 * implement segment tree => for min, max, sum, product(multiplication), bitwise-and, bitwise-or, bitwise-xor, lcm and hcf
 * implement fenwick tree => for addition, product(multiplication), bitwise-xor => the functions for which their inverse exists
 * implement sparse table => max, min, lcm, hcf => the functions for which f(a,b,c,d,e) = f(f(a,b,c), f(b,c,d,e))
