1. Tasks picked

DSTRING tasks
 * implement boyer moore substring finding algorithm (and Aho corasick algorithm)

2. Add new datastructure types tasks (*future)

HEAP tasks (NEW DATASTRUCTURE inclusion)
 * implement a node based binomial heap and fibonacci heap and abstract them over the fastheap datastructure in cutlery, implemented as enums like FIBONACCI_HEAP and BINOMIAL_HEAP

BST tasks (NEW DATASTRUCTURE inclusion)
 * provide implementation for splay trees, Treap, AA etc in bst (* not yet decided, if it will be implemented)
 * add unsigned int subtree_size the number of nodes in sub tree rooted at the given node to provide functions to get nth smallest or largest in the bst. This variable is 0 in a node that is not in bst. Changes only required to subtree_size in rotation, exchange_positions and insert (make subtree_size = 1) and delete (make subtree_size = 0) functionality. Add functionality to get number of elements greater than x and lesser than x, OR get_element_count in bst and get_subtree_element_count (internal function).
 * provide an iterator for bst.

RADIX_TREE tasks (NEW DATASTRUCTURE)
 * implement a radix tree data structure i.e. a trie data structure that is defined as
struct trie_node
{
    dstring partial_string;
    int prefix_count; // total number of strings in the complete trie structure that have the prefic ending at partial string
    void* value;
    hashmap children; <K,V> => <trie_node.partial_string[0],trie_node>;
};
 * implement insert, search and remove operation to be noted a trie_node can not be deleted as long as it has either of value or any of the children

3. Competely new datastructure tasks (*future)
UNION FIND datastructure
 * implement union find data structure. consisting of embedded nodes.
 * no need of any parent structure to hold the data, use only embedded nodes.
 * each embedded node consists of parent*, rank and sub_tree_element_count for each embedded node

RANGE QUERY ON INT/UINT ARRAY DATASTRUCTURE tasks
 * use int or unsigned int for below functionality and implement their itrative approaches only
 * access methods must be insert, update, find_range
 * implement segment tree => for min, max, sum, product(multiplication), bitwise-and, bitwise-or, bitwise-xor, lcm and hcf
 * implement fenwick tree => for addition, product(multiplication), bitwise-xor => the functions for which their inverse exists
 * implement sparse table => max, min, lcm, hcf => the functions for which f(a,b,c,d,e) = f(f(a,b,c), f(b,c,d,e))

FLAT datastructure tasks (NEW DATASTRUCTURE)
 * implement flat_array and flat_map (using robinhood hashing) that use void* to array of structs instead of void** to array of pointers to structs
 * check and re evaluate what all algorithms can be moved to using flat array and flat map for better cache utilization and replace them
 * provide reasons explicitly for all such decisions, do not replace to flat map or flat array while handling user provided structures

PROBABLISTIC datastructure tasks (NEW DATASTRUCTURE)
 * implement bloom filter, build it with approximate unique count
 * implement count min sketch, with alternatives like INCREMENT_ALL vs INCREMENT_MIN_ONLY