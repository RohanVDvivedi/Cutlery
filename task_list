1. Tasks picked

BUG FIX IN ALL EMBEDDED NODE BASED DATASTRUCTURES
 * mostly observed in get_next_of and get_prev_of in hashmap, linkedlist, singlylist and bst data structures, we are not checking the data_xist to not be a free floating node, if it is free floating node then return NULL immediately

VALUE_ARRAYLIST tasks (NEW DATASTRUCTURE)
 * build an only header file #define declarations_for_value_arraylist(value_arraylist_type_name, value_type) and #define definitions_for_value_arraylist(value_arraylist_type, value_type), and providing all functions of arraylist.h
 * struct value_arraylist_type_name
	{
		cy_uint first;						// first element's index
		cy_uint element_count;		// number of elements in the value_arraylist
		cy_uint capacity;					// number of elements that can be accomodated in the value_arraylist
		memory_allocator mem_allocator; // allocator to use
		value_type* data;				// actual data array
	};
 * add comment that this (value_arraylist) is suppossed to be used with only small ephemeral structs and primitive types, that have no immovable attributes like (synchronization primitives like) mutex, conditional variables or semaphores

ARRAYLIST
 * add functionality to add n elements at nth element from front or back.

ARRAY
 * decommission array with necessary functionality from arraylist, the cost is just 1 cy_uint first_index,
 * use arraylist in hashmap and heap.
 * modify search sort to use arraylist instead of array

2. Add new datastructure types tasks (*future)

RESOURCE_CLEANUP_STACK (NEW DATASTRUCTURE)
 * build as an implementation of value_arraylist
 * build golang's defer like functionality, taking in a resource_cleanup(void* resource) and a resource to be cleaned up, using a stack
   * you can push a clean up task for a resource
   * or you can run all the cleanup tasks
   * or destroy all the cleanup tasks

RADIX_TREE tasks (NEW DATASTRUCTURE)
 * implement a radix tree data structure i.e. a trie data structure that is defined as
struct trie_node
{
    dstring partial_string;
    cy_uint prefix_count; // total number of strings in the complete trie data structure that have the prefix of partial_string
    void* value;
    hashmap children; <K,V> => <trie_node.partial_string[0],trie_node>;

    // node for children hashmap, used by the parent, this will only be ununsed in root trie_node
    rbhnode/bstnode/llnode children_embed_node;
};
 * implement insert, search and remove operation to be noted a trie_node can not be deleted as long as it has either of value or any of the children

HEAP tasks (NEW DATASTRUCTURE inclusion)
 * implement a node based binomial heap and fibonacci heap.
 * it will use binomialheap node as a struct
struct binomialheapnode
{
	// parent of this node
	binomialheapnode* parent;

	// number of children
	cy_uint degree;

	// linkedlist of its children
	linkedlist children;
};
 * binomialheapnode will have utility functions to detach-from-parent, swap position-with-parent, link-parent-and-child etc since these fucntions can be used both with fibonacci heap and binomial heap
 * we will also have the main data structure struct as
struct binomialheap
{
	// implementation_type can be FIBONACCI_FAST_HEAP or BINOMIAL_FAST_HEAP
	binomialheap_implementation_type implementation_type;

	// type stores MIN_HEAP or MAX_HEAP
	heap_type type;

	// pointer to the least or greatest node, based on type
	binomialheapnode* top_node;

	linkedlist root_list;

	// comparator
	int (*compare)(const void* data1, const void* data2);
};

 * implement leftist heap as leftistheap (* future)

DSTRING tasks
 * implement boyer moore substring finding algorithm (and Aho corasick algorithm)

BST tasks (NEW DATASTRUCTURE inclusion * future)
 * provide implementation for TREAP, AA_TREE etc in bst
 * add cy_uint subtree_size (==0 if node is not in any bst) giving the number of nodes in sub tree rooted at the given node 
   * to provide functionality to get_index_of_element_in_bst, get_element_at_index_in_bst OR get_element_count in bst and get_subtree_element_count (internal function).
   * changes only required to subtree_size in bst_rotations.* and bst_core.* source files.

3. Competely new datastructure tasks (*future)

RANGE QUERY ON INT/UINT ARRAY DATASTRUCTURE tasks
 * use value_arraylist for below functionality and implement their itrative approaches only
 * access methods must be insert, update, find_range
 * implement segment tree => for min, max, sum, product(multiplication), bitwise-and, bitwise-or, bitwise-xor, lcm and hcf
 * implement fenwick tree => for addition, product(multiplication), bitwise-xor => the functions for which their inverse exists
 * implement sparse table => max, min, lcm, hcf => the functions for which f(a,b,c,d,e) = f(f(a,b,c), f(b,c,d,e))
