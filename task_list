1. Tasks picked

ALLOCATOR
 * refactor stream_to_read_until_dstring and stream_for_file_descriptor to use cutlery allocators

2. Add new datastructure types tasks (*future)

STREAM
 * all sprint_* functions to be updated to serialize_* functions for all Cutlery data-structures, each of which return -1 for failure and 0 forsuccess

HEAP tasks (NEW DATASTRUCTURE inclusion)
 * implement a node based intrusive fibonacci heap. (binomial heap will not be supported, strict constraints of binomial heap will give us no benefit)
struct fibheapnode
{
	// must be the first element of this node, so that children and root_list can use the same node_offset as the fibheap.node_offset
	llnode sibling_links;

	// parent of this node, NULL if it exists in the rootlist
	void* parent;

	// number of children
	cy_uint degree;

	// the below bit will be set if the node lost a child since it was merged with its parent, this bit will be cleared as soon as it gets added to rootlist
	int lost_child_marker;

	// linkedlist of its children
	linkedlist children;
};
struct fibheap
{
	heap_info info;

	cy_uint node_offset;

	// pointer to the top of the priority_queue, this node must be present in the root_list
	void* top_node;

	// linkedlist of its roots
	linkedlist root_list;
};
 * initialize_fibheap -> makes a new empty fibheap
 * merge_fibheap -> merge root lists of the other fibheap, update the top_node
 * get_top_of_fibheap -> returns the top element
 * pop_from_fibheap -> removes top element, and adds all its children to the root_list, update the top_node
 * push_to_fibheap -> inserts the element to the rootlist and updates the top_node
 * remove_from_fibheap -> removes node from fibheap and pushes all its children to the root_list, update the top_node
 * heapify_at -> removes node or any of its children from the tree and puts them back into the root_list, if they pass is_reordering_required test, updates top_node
 * internal functions
   * move_node_to_root_list -> does as suggested, and updates top_node, it will also increments the lost_child_marker of its parent, NOP if its parent is NULL
   * find_new_top_node given the linkedlist -> iterates over root_list and finds the new top_node
   * restore_structure -> creates a hashmap <ELEMENTS_AS_LINKED_LIST with same node_offset> degree -> root node, of fixed size = 32, and then keep on merging nodes with same degree and promoting the parent, then remove all of them into the root_list of fibheap, while keeping track of the top_node

BST tasks (NEW DATASTRUCTURE inclusion * future)
 * provide implementation for TREAP, AA_TREE etc in bst
 * add cy_uint subtree_size (==0 if node is not in any bst) giving the number of nodes in sub tree rooted at the given node 
   * to provide functionality to get_index_of_element_in_bst, get_element_at_index_in_bst OR get_element_count in bst and get_subtree_element_count (internal function).
   * changes only required to subtree_size in bst_rotations.* and bst_core.* source files.

3. Competely new datastructure tasks (*future)

RANGE QUERY ON INT/UINT ARRAY DATASTRUCTURE tasks
 * use value_arraylist for below functionality and implement their iterative approaches only
 * access methods must be insert, update, find_range
 * implement segment tree => for min, max, sum, product(multiplication), bitwise-and, bitwise-or, bitwise-xor, lcm and hcf
 * implement fenwick tree => for addition, product(multiplication), bitwise-xor => the functions for which their inverse exists
 * implement sparse table => max, min, lcm, hcf => the functions for which f(a,b,c,d,e) = f(f(a,b,c), f(b,c,d,e))
